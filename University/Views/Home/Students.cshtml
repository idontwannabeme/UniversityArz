@{
    ViewData["Title"] = "Список студентов";
}

<div class="content">
    <div class="students-header">
        <h2>Список студентов</h2>
        <button class="btn" id="addStudentBtn">➕ Добавить студента</button>
    </div>
    
    <div class="search-box">
        <input type="text" id="searchInput" placeholder="Поиск по ФИО, email или студенческому...">
        <button id="searchBtn" class="btn">🔍 Найти</button>
        <button id="showAllBtn" class="btn" style="background: #28a745;">👥 Показать всех</button>
    </div>
    <div class="student-actions">
    <!-- Существующие кнопки -->
    <button class="action-btn" id="exportBtn">
        <span>📊 Экспорт в Excel</span>
    </button>
    <button class="action-btn" id="printBtn">
        <span>🖨️ Печать</span>
    </button>
    <button class="action-btn" id="clearFiltersBtn">
        <span>🧹 Очистить фильтры</span>
    </button>
    <button class="action-btn" id="refreshBtn">
        <span>🔄 Обновить</span>
    </button>
    <!-- Новая кнопка диагностики -->
    <button class="action-btn" id="diagnoseBtn" style="background: #ff6b6b;">
        <span>🔧 Диагностика</span>
    </button>
</div>
    <div class="filters">
        <div class="filter-group">
            <label>Факультет</label>
            <select id="facultyFilter">
                <option value="">Все факультеты</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Курс</label>
            <select id="courseFilter">
                <option value="">Все курсы</option>
                <option value="1">1 курс</option>
                <option value="2">2 курс</option>
                <option value="3">3 курс</option>
                <option value="4">4 курс</option>
                <option value="5">5 курс</option>
                <option value="6">6 курс</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Статус</label>
            <select id="statusFilter">
                <option value="">Все статусы</option>
                <option value="0">Активный</option>
                <option value="1">В академическом отпуске</option>
                <option value="2">Отчислен</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Группа</label>
            <input type="text" id="groupFilter" placeholder="Фильтр по группе...">
        </div>
    </div>
    
    <div class="student-actions">
        <button class="action-btn" id="exportBtn">
            <span>📊 Экспорт в Excel</span>
        </button>
        <button class="action-btn" id="printBtn">
            <span>🖨️ Печать</span>
        </button>
        <button class="action-btn" id="clearFiltersBtn">
            <span>🧹 Очистить фильтры</span>
        </button>
        <button class="action-btn" id="refreshBtn">
            <span>🔄 Обновить</span>
        </button>
    </div>

    <div class="search-info" id="searchInfo" style="display: none;">
        <!-- Информация о поиске будет здесь -->
    </div>
    
    <div id="loadingIndicator" style="display: none;">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <div>Загрузка данных...</div>
        </div>
    </div>
    
    <div id="studentsTableContainer">
        <div class="empty-state">
            <div class="empty-icon">👨‍🎓</div>
            <h3>Список студентов пуст</h3>
            <p>Используйте поиск или нажмите "Показать всех" для загрузки данных</p>
            <button class="btn" id="loadAllStudentsBtn">👥 Показать всех студентов</button>
        </div>
    </div>

    <!-- Пагинация -->
    <div id="paginationContainer" style="display: none;">
        <div class="pagination">
            <button id="prevPage" class="pagination-btn">⬅️ Назад</button>
            <span id="pageInfo" class="page-info"></span>
            <button id="nextPage" class="pagination-btn">Вперед ➡️</button>
        </div>
    </div>
</div>

<!-- Модальное окно для добавления/редактирования студента -->
<div class="modal" id="studentModal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modalTitle">Добавить студента</h3>
            <button class="close-btn" id="closeModalBtn">&times;</button>
        </div>
        <form id="studentForm">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">Имя *</label>
                    <input type="text" id="firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия *</label>
                    <input type="text" id="lastName" required>
                </div>
                <div class="form-group">
                    <label for="middleName">Отчество</label>
                    <input type="text" id="middleName">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="studentId">Студенческий билет *</label>
                    <input type="text" id="studentId" required>
                </div>
                <div class="form-group">
                    <label for="email">Email *</label>
                    <input type="email" id="email" required>
                </div>
                <div class="form-group">
                    <label for="phone">Телефон</label>
                    <input type="tel" id="phone">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="faculty">Факультет *</label>
                    <select id="faculty" required>
                        <option value="">Выберите факультет</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="course">Курс *</label>
                    <select id="course" required>
                        <option value="">Выберите курс</option>
                        <option value="1">1 курс</option>
                        <option value="2">2 курс</option>
                        <option value="3">3 курс</option>
                        <option value="4">4 курс</option>
                        <option value="5">5 курс</option>
                        <option value="6">6 курс</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="group">Группа *</label>
                    <input type="text" id="group" required>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="enrollmentDate">Дата поступления *</label>
                    <input type="date" id="enrollmentDate" required>
                </div>
                <div class="form-group">
                    <label for="status">Статус *</label>
                    <select id="status" required>
                        <option value="0">Активный</option>
                        <option value="1">В академическом отпуске</option>
                        <option value="2">Отчислен</option>
                    </select>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" id="cancelBtn">Отмена</button>
                <button type="submit" class="btn" id="saveBtn">💾 Сохранить</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
          // Полностью клиентское решение для работы со студентами
    let students = [
        {
            id: 1,
            studentId: "ST2021001",
            firstName: "Алексей",
            lastName: "Иванов",
            middleName: "Петрович",
            email: "ivanov@student.university.ru",
            facultyId: 1,
            faculty: { id: 1, name: "Информатики и вычислительной техники" },
            course: 3,
            group: "ИВТ-31",
            phone: "+7 (915) 123-45-67",
            status: 0,
            enrollmentDate: "2021-09-01T00:00:00",
            createdAt: "2021-09-01T00:00:00"
        },
        {
            id: 2,
            studentId: "ST2021002",
            firstName: "Мария",
            lastName: "Петрова",
            middleName: "Сергеевна",
            email: "petrova@student.university.ru",
            facultyId: 2,
            faculty: { id: 2, name: "Экономический" },
            course: 2,
            group: "ЭК-22",
            phone: "+7 (915) 123-45-68",
            status: 0,
            enrollmentDate: "2021-09-01T00:00:00",
            createdAt: "2021-09-01T00:00:00"
        },
        {
            id: 3,
            studentId: "ST2020034",
            firstName: "Дмитрий",
            lastName: "Сидоров",
            middleName: "Иванович",
            email: "sidorov@student.university.ru",
            facultyId: 3,
            faculty: { id: 3, name: "Юридический" },
            course: 4,
            group: "ЮР-41",
            phone: "+7 (915) 123-45-69",
            status: 1,
            enrollmentDate: "2020-09-01T00:00:00",
            createdAt: "2020-09-01T00:00:00"
        },
        {
            id: 4,
            studentId: "ST2021056",
            firstName: "Анна",
            lastName: "Козлова",
            middleName: "Владимировна",
            email: "kozlovа@student.university.ru",
            facultyId: 4,
            faculty: { id: 4, name: "Филологический" },
            course: 1,
            group: "ФЛ-11",
            phone: "+7 (915) 123-45-70",
            status: 0,
            enrollmentDate: "2021-09-01T00:00:00",
            createdAt: "2021-09-01T00:00:00"
        }
    ];

    // Факультеты для форм
    const faculties = [
        { id: 1, name: "Информатики и вычислительной техники" },
        { id: 2, name: "Экономический" },
        { id: 3, name: "Юридический" },
        { id: 4, name: "Филологический" }
    ];

    // Глобальные переменные
    let currentPage = 1;
    const pageSize = 10;
    let totalStudents = 0;
    let currentStudentId = null;

    document.addEventListener('DOMContentLoaded', function() {
        initializePage();
    });

    function initializePage() {
        loadFaculties();
        setupEventListeners();
        loadAllStudents();
    }

    function setupEventListeners() {
        // Поиск и фильтры
        document.getElementById('searchBtn').addEventListener('click', performSearch);
        document.getElementById('showAllBtn').addEventListener('click', loadAllStudents);
        document.getElementById('loadAllStudentsBtn').addEventListener('click', loadAllStudents);
        document.getElementById('clearFiltersBtn').addEventListener('click', clearFilters);
        document.getElementById('refreshBtn').addEventListener('click', loadAllStudents);

        document.getElementById('facultyFilter').addEventListener('change', performSearch);
        document.getElementById('courseFilter').addEventListener('change', performSearch);
        document.getElementById('statusFilter').addEventListener('change', performSearch);
        document.getElementById('groupFilter').addEventListener('input', debounce(performSearch, 500));
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') performSearch();
        });

        // Модальное окно
        document.getElementById('addStudentBtn').addEventListener('click', () => showStudentModal());
        document.getElementById('closeModalBtn').addEventListener('click', closeStudentModal);
        document.getElementById('cancelBtn').addEventListener('click', closeStudentModal);
        document.getElementById('studentForm').addEventListener('submit', saveStudent);

        // Действия
        document.getElementById('exportBtn').addEventListener('click', exportToExcel);
        document.getElementById('printBtn').addEventListener('click', printTable);
    }

    // Функции поиска и фильтрации
    function performSearch() {
        currentPage = 1;
        loadStudents();
    }

    function loadAllStudents() {
        clearFilters();
        currentPage = 1;
        loadStudents();
    }

    function clearFilters() {
        document.getElementById('searchInput').value = '';
        document.getElementById('facultyFilter').value = '';
        document.getElementById('courseFilter').value = '';
        document.getElementById('statusFilter').value = '';
        document.getElementById('groupFilter').value = '';
    }

    // Основная функция загрузки студентов
    function loadStudents() {
        showLoading(true);

        const search = document.getElementById('searchInput').value.toLowerCase();
        const facultyId = document.getElementById('facultyFilter').value;
        const course = document.getElementById('courseFilter').value;
        const status = document.getElementById('statusFilter').value;
        const group = document.getElementById('groupFilter').value.toLowerCase();

        // Фильтрация студентов
        let filteredStudents = students.filter(student => {
            // Поиск по ФИО, email или студенческому
            if (search && !(
                student.firstName.toLowerCase().includes(search) ||
                student.lastName.toLowerCase().includes(search) ||
                (student.middleName && student.middleName.toLowerCase().includes(search)) ||
                student.email.toLowerCase().includes(search) ||
                student.studentId.toLowerCase().includes(search)
            )) {
                return false;
            }

            // Фильтр по факультету
            if (facultyId && student.facultyId != facultyId) {
                return false;
            }

            // Фильтр по курсу
            if (course && student.course != course) {
                return false;
            }

            // Фильтр по статусу
            if (status && student.status != status) {
                return false;
            }

            // Фильтр по группе
            if (group && !student.group.toLowerCase().includes(group)) {
                return false;
            }

            return true;
        });

        // Сортировка по фамилии и имени
        filteredStudents.sort((a, b) => {
            if (a.lastName !== b.lastName) {
                return a.lastName.localeCompare(b.lastName);
            }
            return a.firstName.localeCompare(b.firstName);
        });

        renderStudentsTable(filteredStudents);
        updateSearchInfo(filteredStudents.length);
        showLoading(false);
    }

    // Функция отображения таблицы
    function renderStudentsTable(studentsToShow) {
        const container = document.getElementById('studentsTableContainer');
        const pagination = document.getElementById('paginationContainer');

        if (!studentsToShow || studentsToShow.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">🔍</div>
                    <h3>Студенты не найдены</h3>
                    <p>Попробуйте изменить параметры поиска или очистить фильтры</p>
                    <button class="btn" onclick="loadAllStudents()">👥 Показать всех студентов</button>
                </div>
            `;
            pagination.style.display = 'none';
            return;
        }

        let html = `
            <div class="table-container">
                <table class="students-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>ФИО</th>
                            <th>Email</th>
                            <th>Факультет</th>
                            <th>Курс</th>
                            <th>Группа</th>
                            <th>Телефон</th>
                            <th>Статус</th>
                            <th>Дата поступления</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        studentsToShow.forEach(student => {
            const statusText = getStatusText(student.status);
            const statusClass = getStatusClass(student.status);
            const enrollmentDate = formatDate(student.enrollmentDate);

            html += `
                <tr>
                    <td><strong>${student.studentId}</strong></td>
                    <td class="student-name">
                        <div class="name-main">${student.lastName} ${student.firstName}</div>
                        ${student.middleName ? `<div class="name-middle">${student.middleName}</div>` : ''}
                    </td>
                    <td>${student.email || '-'}</td>
                    <td>${student.faculty?.name || 'Не указан'}</td>
                    <td class="text-center">${student.course}</td>
                    <td class="text-center"><strong>${student.group}</strong></td>
                    <td>${student.phone || '-'}</td>
                    <td><span class="student-status ${statusClass}">${statusText}</span></td>
                    <td class="text-nowrap">${enrollmentDate}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="action-btn view-btn" onclick="viewStudent(${student.id})" title="Просмотр">
                                👁️
                            </button>
                            <button class="action-btn edit-btn" onclick="editStudent(${student.id})" title="Редактировать">
                                ✏️
                            </button>
                            <button class="action-btn delete-btn" onclick="deleteStudent(${student.id})" title="Удалить">
                                🗑️
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        });

        html += '</tbody></table></div>';
        container.innerHTML = html;

        // Добавляем информационное сообщение
        const infoMessage = document.createElement('div');
        infoMessage.className = 'demo-warning';
        infoMessage.innerHTML = `
            <strong>💡 Локальное хранилище</strong>
            <span>Данные хранятся в браузере. При перезагрузке страницы добавленные данные сохранятся.</span>
        `;
        container.insertBefore(infoMessage, container.firstChild);

        pagination.style.display = 'none'; // Отключаем пагинацию для простоты
    }

    // Функции модального окна
    function showStudentModal(student = null) {
        currentStudentId = student ? student.id : null;
        const modal = document.getElementById('studentModal');
        const title = document.getElementById('modalTitle');

        title.textContent = student ? 'Редактировать студента' : 'Добавить студента';

        if (student) {
            // Заполняем форму данными студента
            document.getElementById('firstName').value = student.firstName;
            document.getElementById('lastName').value = student.lastName;
            document.getElementById('middleName').value = student.middleName || '';
            document.getElementById('studentId').value = student.studentId;
            document.getElementById('email').value = student.email;
            document.getElementById('phone').value = student.phone || '';
            document.getElementById('faculty').value = student.facultyId;
            document.getElementById('course').value = student.course;
            document.getElementById('group').value = student.group;
            document.getElementById('enrollmentDate').value = student.enrollmentDate.split('T')[0];
            document.getElementById('status').value = student.status;
        } else {
            // Очищаем форму для нового студента
            document.getElementById('studentForm').reset();
            document.getElementById('enrollmentDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('status').value = '0';
        }

        modal.style.display = 'block';
    }

    function closeStudentModal() {
        document.getElementById('studentModal').style.display = 'none';
        document.getElementById('studentForm').reset();
        currentStudentId = null;
    }

    function saveStudent(e) {
        e.preventDefault();

        const saveBtn = document.getElementById('saveBtn');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '⏳ Сохранение...';
        saveBtn.disabled = true;

        try {
            const studentData = {
                firstName: document.getElementById('firstName').value.trim(),
                lastName: document.getElementById('lastName').value.trim(),
                middleName: document.getElementById('middleName').value.trim(),
                studentId: document.getElementById('studentId').value.trim(),
                email: document.getElementById('email').value.trim(),
                phone: document.getElementById('phone').value.trim(),
                facultyId: parseInt(document.getElementById('faculty').value),
                faculty: faculties.find(f => f.id === parseInt(document.getElementById('faculty').value)),
                course: parseInt(document.getElementById('course').value),
                group: document.getElementById('group').value.trim(),
                enrollmentDate: document.getElementById('enrollmentDate').value,
                status: parseInt(document.getElementById('status').value),
                createdAt: new Date().toISOString()
            };

            // Валидация
            if (!studentData.firstName || !studentData.lastName || !studentData.studentId || !studentData.email) {
                throw new Error('Заполните обязательные поля (Имя, Фамилия, Студенческий билет, Email)');
            }

            if (currentStudentId) {
                // Редактирование существующего студента
                const index = students.findIndex(s => s.id === currentStudentId);
                if (index !== -1) {
                    studentData.id = currentStudentId;
                    studentData.createdAt = students[index].createdAt; // Сохраняем оригинальную дату создания
                    students[index] = studentData;
                }
            } else {
                // Добавление нового студента
                studentData.id = Date.now(); // Генерируем уникальный ID
                students.push(studentData);
            }

            // Сохраняем в localStorage
            saveToLocalStorage();

            alert(currentStudentId ? '🎉 Студент успешно обновлен!' : '🎉 Студент успешно добавлен!');
            closeStudentModal();
            loadStudents(); // Перезагружаем список

        } catch (error) {
            console.error('❌ Ошибка при сохранении студента:', error);
            alert('❌ Ошибка при сохранении студента: ' + error.message);
        } finally {
            saveBtn.innerHTML = originalText;
            saveBtn.disabled = false;
        }
    }

    // Функции действий
    function viewStudent(id) {
        const student = students.find(s => s.id === id);
        if (student) {
            const statusText = getStatusText(student.status);
            const enrollmentDate = formatDate(student.enrollmentDate);

            alert(`👤 Просмотр студента\n
    📋 Студенческий: ${student.studentId}
    👤 ФИО: ${student.lastName} ${student.firstName} ${student.middleName || ''}
    📧 Email: ${student.email}
    📞 Телефон: ${student.phone || 'Не указан'}
    🎓 Факультет: ${student.faculty?.name || 'Не указан'}
    📚 Курс: ${student.course}
    👥 Группа: ${student.group}
    📊 Статус: ${statusText}
    📅 Дата поступления: ${enrollmentDate}`);
        }
    }

    function editStudent(id) {
        const student = students.find(s => s.id === id);
        if (student) {
            showStudentModal(student);
        } else {
            alert('❌ Студент не найден');
        }
    }

    function deleteStudent(id) {
        if (!confirm('❓ Вы уверены, что хотите удалить этого студента?')) return;

        try {
            const index = students.findIndex(s => s.id === id);
            if (index !== -1) {
                students.splice(index, 1);
                saveToLocalStorage();
                alert('✅ Студент успешно удален!');
                loadStudents();
            } else {
                alert('❌ Студент не найден');
            }
        } catch (error) {
            console.error('❌ Ошибка при удалении студента:', error);
            alert('❌ Ошибка при удалении студента: ' + error.message);
        }
    }

    // Работа с localStorage
    function saveToLocalStorage() {
        try {
            localStorage.setItem('universityStudents', JSON.stringify(students));
            console.log('💾 Данные сохранены в localStorage');
        } catch (error) {
            console.error('❌ Ошибка сохранения в localStorage:', error);
        }
    }

    function loadFromLocalStorage() {
        try {
            const saved = localStorage.getItem('universityStudents');
            if (saved) {
                const parsed = JSON.parse(saved);
                if (Array.isArray(parsed) && parsed.length > 0) {
                    students = parsed;
                    console.log('📂 Данные загружены из localStorage:', students.length, 'студентов');
                    return true;
                }
            }
        } catch (error) {
            console.error('❌ Ошибка загрузки из localStorage:', error);
        }
        return false;
    }

    // Вспомогательные функции
    function updateSearchInfo(count) {
        const searchInfo = document.getElementById('searchInfo');
        const search = document.getElementById('searchInput').value;
        const faculty = document.getElementById('facultyFilter').value;
        const course = document.getElementById('courseFilter').value;
        const status = document.getElementById('statusFilter').value;
        const group = document.getElementById('groupFilter').value;

        let infoText = `Найдено студентов: <strong>${count}</strong>`;
        const filters = [];

        if (search) filters.push(`поиск: "${search}"`);
        if (faculty) {
            const facultyName = document.getElementById('facultyFilter').selectedOptions[0].text;
            filters.push(`факультет: ${facultyName}`);
        }
        if (course) filters.push(`курс: ${course}`);
        if (status) filters.push(`статус: ${getStatusText(parseInt(status))}`);
        if (group) filters.push(`группа: "${group}"`);

        if (filters.length > 0) {
            infoText += ` | Фильтры: ${filters.join(', ')}`;
        }

        searchInfo.innerHTML = infoText;
        searchInfo.style.display = 'block';
    }

    function showLoading(show) {
        const loading = document.getElementById('loadingIndicator');
        loading.style.display = show ? 'block' : 'none';
    }

    function getStatusText(status) {
        switch(status) {
            case 0: return 'Активный';
            case 1: return 'Академ. отпуск';
            case 2: return 'Отчислен';
            default: return 'Неизвестно';
        }
    }

    function getStatusClass(status) {
        switch(status) {
            case 0: return 'status-active';
            case 1: return 'status-warning';
            case 2: return 'status-inactive';
            default: return '';
        }
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('ru-RU');
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Дополнительные функции
    function exportToExcel() {
        alert('📊 Функция экспорта в Excel будет реализована в будущем');
    }

    function printTable() {
        window.print();
    }

    // Загрузка факультетов
    function loadFaculties() {
        const selects = [
            document.getElementById('facultyFilter'),
            document.getElementById('faculty')
        ];

        selects.forEach(select => {
            // Сохраняем первый option
            const firstOption = select.options[0];
            select.innerHTML = '';
            select.appendChild(firstOption);

            faculties.forEach(faculty => {
                const option = document.createElement('option');
                option.value = faculty.id;
                option.textContent = faculty.name;
                select.appendChild(option);
            });
        });
    }

    // Инициализация при загрузке
    function initializePage() {
        // Пробуем загрузить из localStorage
        if (loadFromLocalStorage()) {
            console.log('✅ Используем данные из localStorage');
        } else {
            console.log('✅ Используем демо-данные');
            saveToLocalStorage(); // Сохраняем демо-данные в localStorage
        }

        loadFaculties();
        setupEventListeners();
        loadAllStudents();
    }
    </script> }

    <style>
        /* Стили для страницы студентов */
        .students-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .search-box input {
            flex: 1;
            min-width: 250px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
            font-size: 14px;
        }

        .filter-group select,
        .filter-group input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .student-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .action-btn {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .action-btn:hover {
            background-color: #e9ecef;
            transform: translateY(-1px);
        }

        .btn {
            background-color: #2a4b8c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .btn:hover {
            background-color: #1a2a6c;
        }

        .btn-secondary {
            background-color: #6c757d;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        /* Таблица */
        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .students-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .students-table th {
            background: linear-gradient(135deg, #2a4b8c, #1a2a6c);
            color: white;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            position: sticky;
            top: 0;
        }

        .students-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e9ecef;
            font-size: 14px;
        }

        .students-table tr:hover {
            background-color: #f8f9fa;
        }

        .students-table tr:nth-child(even) {
            background-color: #fafafa;
        }

        .students-table tr:nth-child(even):hover {
            background-color: #f1f3f4;
        }

        .student-name .name-main {
            font-weight: 500;
        }

        .student-name .name-middle {
            font-size: 0.9em;
            color: #666;
        }

        .text-center {
            text-align: center;
        }

        .text-nowrap {
            white-space: nowrap;
        }

        .action-buttons {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
        }

        .view-btn { background-color: #e3f2fd; }
        .edit-btn { background-color: #fff3e0; }
        .delete-btn { background-color: #ffebee; }

        /* Статусы */
        .student-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-align: center;
            min-width: 120px;
        }

        .status-active {
            background-color: #e8f5e8;
            color: #2e7d32;
            border: 1px solid #2e7d32;
        }

        .status-warning {
            background-color: #fff3e0;
            color: #f57c00;
            border: 1px solid #f57c00;
        }

        .status-inactive {
            background-color: #ffebee;
            color: #c62828;
            border: 1px solid #c62828;
        }

        /* Пагинация */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
        }

        .pagination-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-info {
            font-size: 14px;
            color: #666;
        }

        /* Модальное окно */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .modal-header h3 {
            margin: 0;
            color: #2a4b8c;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            padding: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
        }

        .form-group input,
        .form-group select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 20px;
            border-top: 1px solid #e9ecef;
        }

        /* Состояния */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-icon {
            font-size: 64px;
            margin-bottom: 20px;
        }

        .loading-spinner {
            text-align: center;
            padding: 40px;
            color: #2a4b8c;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #2a4b8c;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        .keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .demo-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .search-info {
            background: #e7f3ff;
            border: 1px solid #b3d9ff;
            color: #0066cc;
            padding: 12px 20px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        /* Адаптивность */
        .media (max-width: 768px) {
            .students-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .search-box {
                flex-direction: column;
            }
            
            .filters {
                grid-template-columns: 1fr;
            }
            
            .student-actions {
                flex-direction: column;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .students-table {
                font-size: 12px;
            }
            
            .students-table th,
            .students-table td {
                padding: 8px 10px;
            }
        }
    </style>
</div>