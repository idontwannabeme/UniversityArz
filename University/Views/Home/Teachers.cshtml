@{
    ViewData["Title"] = "Преподаватели";
}

<div class="content">
    <div class="teachers-header">
        <h2>📚 Преподаватели</h2>
        <button class="btn" id="addTeacherBtn">➕ Добавить преподавателя</button>
    </div>
    
    <div class="search-box">
        <input type="text" id="searchInput" placeholder="Поиск по ФИО, email или ID...">
        <button id="searchBtn" class="btn">🔍 Найти</button>
        <button id="showAllBtn" class="btn" style="background: #28a745;">👥 Показать всех</button>
    </div>
    
    <div class="filters">
        <div class="filter-group">
            <label>Факультет</label>
            <select id="facultyFilter">
                <option value="">Все факультеты</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Должность</label>
            <select id="positionFilter">
                <option value="">Все должности</option>
                <option value="Профессор">Профессор</option>
                <option value="Доцент">Доцент</option>
                <option value="Старший преподаватель">Старший преподаватель</option>
                <option value="Преподаватель">Преподаватель</option>
                <option value="Ассистент">Ассистент</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Статус</label>
            <select id="statusFilter">
                <option value="">Все статусы</option>
                <option value="0">Активный</option>
                <option value="1">В отпуске</option>
                <option value="2">На больничном</option>
                <option value="3">Уволен</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Ученая степень</label>
            <select id="degreeFilter">
                <option value="">Все степени</option>
                <option value="Доктор наук">Доктор наук</option>
                <option value="Кандидат наук">Кандидат наук</option>
                <option value="PhD">PhD</option>
                <option value="Без степени">Без степени</option>
            </select>
        </div>
    </div>
    
    <div class="teacher-actions">
        <button class="action-btn" id="exportBtn">
            <span>📊 Экспорт в Excel</span>
        </button>
        <button class="action-btn" id="printBtn">
            <span>🖨️ Печать</span>
        </button>
        <button class="action-btn" id="clearFiltersBtn">
            <span>🧹 Очистить фильтры</span>
        </button>
        <button class="action-btn" id="refreshBtn">
            <span>🔄 Обновить</span>
        </button>
    </div>

    <div class="search-info" id="searchInfo" style="display: none;">
        <!-- Информация о поиске будет здесь -->
    </div>
    
    <div id="loadingIndicator" style="display: none;">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <div>Загрузка данных...</div>
        </div>
    </div>
    
    <div id="teachersTableContainer">
        <div class="empty-state">
            <div class="empty-icon">👨‍🏫</div>
            <h3>Список преподавателей пуст</h3>
            <p>Используйте поиск или нажмите "Показать всех" для загрузки данных</p>
            <button class="btn" id="loadAllTeachersBtn">👥 Показать всех преподавателей</button>
        </div>
    </div>
</div>

<!-- Модальное окно для добавления/редактирования преподавателя -->
<div class="modal" id="teacherModal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modalTitle">Добавить преподавателя</h3>
            <button class="close-btn" id="closeModalBtn">&times;</button>
        </div>
        <form id="teacherForm">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">Имя *</label>
                    <input type="text" id="firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия *</label>
                    <input type="text" id="lastName" required>
                </div>
                <div class="form-group">
                    <label for="middleName">Отчество</label>
                    <input type="text" id="middleName">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="teacherId">ID преподавателя *</label>
                    <input type="text" id="teacherId" required>
                </div>
                <div class="form-group">
                    <label for="email">Email *</label>
                    <input type="email" id="email" required>
                </div>
                <div class="form-group">
                    <label for="phone">Телефон</label>
                    <input type="tel" id="phone">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="faculty">Факультет *</label>
                    <select id="faculty" required>
                        <option value="">Выберите факультет</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="position">Должность *</label>
                    <select id="position" required>
                        <option value="">Выберите должность</option>
                        <option value="Профессор">Профессор</option>
                        <option value="Доцент">Доцент</option>
                        <option value="Старший преподаватель">Старший преподаватель</option>
                        <option value="Преподаватель">Преподаватель</option>
                        <option value="Ассистент">Ассистент</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="academicDegree">Ученая степень</label>
                    <select id="academicDegree">
                        <option value="">Выберите степень</option>
                        <option value="Доктор наук">Доктор наук</option>
                        <option value="Кандидат наук">Кандидат наук</option>
                        <option value="PhD">PhD</option>
                        <option value="Без степени">Без степени</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="status">Статус *</label>
                    <select id="status" required>
                        <option value="0">Активный</option>
                        <option value="1">В отпуске</option>
                        <option value="2">На больничном</option>
                        <option value="3">Уволен</option>
                    </select>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" id="cancelBtn">Отмена</button>
                <button type="submit" class="btn" id="saveBtn">💾 Сохранить</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Полностью клиентское решение для работы с преподавателями
        let teachers = [
            {
                id: 1,
                teacherId: "TCH2021001",
                firstName: "Александр",
                lastName: "Иванов",
                middleName: "Сергеевич",
                email: "ivanov@university.ru",
                facultyId: 1,
                faculty: { id: 1, name: "Информатики и вычислительной техники" },
                position: "Профессор",
                academicDegree: "Доктор технических наук",
                phone: "+7 (495) 222-22-22",
                status: 0,
                createdAt: "2021-09-01T00:00:00"
            },
            {
                id: 2,
                teacherId: "TCH2021002",
                firstName: "Мария",
                lastName: "Петрова",
                middleName: "Владимировна",
                email: "petrova@university.ru",
                facultyId: 1,
                faculty: { id: 1, name: "Информатики и вычислительной техники" },
                position: "Доцент",
                academicDegree: "Кандидат технических наук",
                phone: "+7 (495) 222-22-23",
                status: 0,
                createdAt: "2021-09-01T00:00:00"
            },
            {
                id: 3,
                teacherId: "TCH2020001",
                firstName: "Петр",
                lastName: "Сидоров",
                middleName: "Константинович",
                email: "sidorov@university.ru",
                facultyId: 3,
                faculty: { id: 3, name: "Юридический" },
                position: "Профессор",
                academicDegree: "Доктор юридических наук",
                phone: "+7 (495) 222-22-24",
                status: 0,
                createdAt: "2020-09-01T00:00:00"
            },
            {
                id: 4,
                teacherId: "TCH2021003",
                firstName: "Анна",
                lastName: "Козлова",
                middleName: "Михайловна",
                email: "kozlova@university.ru",
                facultyId: 4,
                faculty: { id: 4, name: "Филологический" },
                position: "Старший преподаватель",
                academicDegree: "Кандидат филологических наук",
                phone: "+7 (495) 222-22-25",
                status: 1,
                createdAt: "2021-09-01T00:00:00"
            }
        ];

        // Факультеты для форм
        const faculties = [
            { id: 1, name: "Информатики и вычислительной техники" },
            { id: 2, name: "Экономический" },
            { id: 3, name: "Юридический" },
            { id: 4, name: "Филологический" }
        ];

        // Глобальные переменные
        let currentTeacherId = null;

        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
        });

        function initializePage() {
            loadFaculties();
            setupEventListeners();
            loadAllTeachers();
        }

        function setupEventListeners() {
            // Поиск и фильтры
            document.getElementById('searchBtn').addEventListener('click', performSearch);
            document.getElementById('showAllBtn').addEventListener('click', loadAllTeachers);
            document.getElementById('loadAllTeachersBtn').addEventListener('click', loadAllTeachers);
            document.getElementById('clearFiltersBtn').addEventListener('click', clearFilters);
            document.getElementById('refreshBtn').addEventListener('click', loadAllTeachers);

            document.getElementById('facultyFilter').addEventListener('change', performSearch);
            document.getElementById('positionFilter').addEventListener('change', performSearch);
            document.getElementById('statusFilter').addEventListener('change', performSearch);
            document.getElementById('degreeFilter').addEventListener('change', performSearch);
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') performSearch();
            });

            // Модальное окно
            document.getElementById('addTeacherBtn').addEventListener('click', () => showTeacherModal());
            document.getElementById('closeModalBtn').addEventListener('click', closeTeacherModal);
            document.getElementById('cancelBtn').addEventListener('click', closeTeacherModal);
            document.getElementById('teacherForm').addEventListener('submit', saveTeacher);

            // Действия
            document.getElementById('exportBtn').addEventListener('click', exportToExcel);
            document.getElementById('printBtn').addEventListener('click', printTable);
        }

        // Функции поиска и фильтрации
        function performSearch() {
            loadTeachers();
        }

        function loadAllTeachers() {
            clearFilters();
            loadTeachers();
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('facultyFilter').value = '';
            document.getElementById('positionFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('degreeFilter').value = '';
        }

        // Основная функция загрузки преподавателей
        function loadTeachers() {
            showLoading(true);
            
            const search = document.getElementById('searchInput').value.toLowerCase();
            const facultyId = document.getElementById('facultyFilter').value;
            const position = document.getElementById('positionFilter').value;
            const status = document.getElementById('statusFilter').value;
            const degree = document.getElementById('degreeFilter').value;
            
            // Фильтрация преподавателей
            let filteredTeachers = teachers.filter(teacher => {
                // Поиск по ФИО, email или ID
                if (search && !(
                    teacher.firstName.toLowerCase().includes(search) ||
                    teacher.lastName.toLowerCase().includes(search) ||
                    (teacher.middleName && teacher.middleName.toLowerCase().includes(search)) ||
                    teacher.email.toLowerCase().includes(search) ||
                    teacher.teacherId.toLowerCase().includes(search)
                )) {
                    return false;
                }
                
                // Фильтр по факультету
                if (facultyId && teacher.facultyId != facultyId) {
                    return false;
                }
                
                // Фильтр по должности
                if (position && teacher.position !== position) {
                    return false;
                }
                
                // Фильтр по статусу
                if (status && teacher.status != status) {
                    return false;
                }
                
                // Фильтр по ученой степени
                if (degree && teacher.academicDegree !== degree) {
                    return false;
                }
                
                return true;
            });
            
            // Сортировка по фамилии и имени
            filteredTeachers.sort((a, b) => {
                if (a.lastName !== b.lastName) {
                    return a.lastName.localeCompare(b.lastName);
                }
                return a.firstName.localeCompare(b.firstName);
            });
            
            renderTeachersTable(filteredTeachers);
            updateSearchInfo(filteredTeachers.length);
            showLoading(false);
        }

        // Функция отображения таблицы
        function renderTeachersTable(teachersToShow) {
            const container = document.getElementById('teachersTableContainer');

            if (!teachersToShow || teachersToShow.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">🔍</div>
                        <h3>Преподаватели не найдены</h3>
                        <p>Попробуйте изменить параметры поиска или очистить фильтры</p>
                        <button class="btn" onclick="loadAllTeachers()">👥 Показать всех преподавателей</button>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="table-container">
                    <table class="teachers-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>ФИО</th>
                                <th>Email</th>
                                <th>Факультет</th>
                                <th>Должность</th>
                                <th>Ученая степень</th>
                                <th>Телефон</th>
                                <th>Статус</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            teachersToShow.forEach(teacher => {
                const statusText = getStatusText(teacher.status);
                const statusClass = getStatusClass(teacher.status);
                
                html += `
                    <tr>
                        <td><strong>${teacher.teacherId}</strong></td>
                        <td class="teacher-name">
                            <div class="name-main">${teacher.lastName} ${teacher.firstName}</div>
                            ${teacher.middleName ? `<div class="name-middle">${teacher.middleName}</div>` : ''}
                        </td>
                        <td>${teacher.email || '-'}</td>
                        <td>${teacher.faculty?.name || 'Не указан'}</td>
                        <td>${teacher.position || '-'}</td>
                        <td>${teacher.academicDegree || '-'}</td>
                        <td>${teacher.phone || '-'}</td>
                        <td><span class="teacher-status ${statusClass}">${statusText}</span></td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn view-btn" onclick="viewTeacher(${teacher.id})" title="Просмотр">
                                    👁️
                                </button>
                                <button class="action-btn edit-btn" onclick="editTeacher(${teacher.id})" title="Редактировать">
                                    ✏️
                                </button>
                                <button class="action-btn delete-btn" onclick="deleteTeacher(${teacher.id})" title="Удалить">
                                    🗑️
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += '</tbody></table></div>';
            container.innerHTML = html;
            
            // Добавляем информационное сообщение
            const infoMessage = document.createElement('div');
            infoMessage.className = 'demo-warning';
            infoMessage.innerHTML = `
                <strong>💡 Локальное хранилище</strong>
                <span>Данные хранятся в браузере. При перезагрузке страницы добавленные данные сохранятся.</span>
            `;
            container.insertBefore(infoMessage, container.firstChild);
        }

        // Функции модального окна
        function showTeacherModal(teacher = null) {
            currentTeacherId = teacher ? teacher.id : null;
            const modal = document.getElementById('teacherModal');
            const title = document.getElementById('modalTitle');
            
            title.textContent = teacher ? 'Редактировать преподавателя' : 'Добавить преподавателя';
            
            if (teacher) {
                // Заполняем форму данными преподавателя
                document.getElementById('firstName').value = teacher.firstName;
                document.getElementById('lastName').value = teacher.lastName;
                document.getElementById('middleName').value = teacher.middleName || '';
                document.getElementById('teacherId').value = teacher.teacherId;
                document.getElementById('email').value = teacher.email;
                document.getElementById('phone').value = teacher.phone || '';
                document.getElementById('faculty').value = teacher.facultyId;
                document.getElementById('position').value = teacher.position || '';
                document.getElementById('academicDegree').value = teacher.academicDegree || '';
                document.getElementById('status').value = teacher.status;
            } else {
                // Очищаем форму для нового преподавателя
                document.getElementById('teacherForm').reset();
                document.getElementById('status').value = '0';
            }
            
            modal.style.display = 'block';
        }

        function closeTeacherModal() {
            document.getElementById('teacherModal').style.display = 'none';
            document.getElementById('teacherForm').reset();
            currentTeacherId = null;
        }

        function saveTeacher(e) {
            e.preventDefault();
            
            const saveBtn = document.getElementById('saveBtn');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '⏳ Сохранение...';
            saveBtn.disabled = true;
            
            try {
                const teacherData = {
                    firstName: document.getElementById('firstName').value.trim(),
                    lastName: document.getElementById('lastName').value.trim(),
                    middleName: document.getElementById('middleName').value.trim(),
                    teacherId: document.getElementById('teacherId').value.trim(),
                    email: document.getElementById('email').value.trim(),
                    phone: document.getElementById('phone').value.trim(),
                    facultyId: parseInt(document.getElementById('faculty').value),
                    faculty: faculties.find(f => f.id === parseInt(document.getElementById('faculty').value)),
                    position: document.getElementById('position').value,
                    academicDegree: document.getElementById('academicDegree').value,
                    status: parseInt(document.getElementById('status').value),
                    createdAt: new Date().toISOString()
                };

                // Валидация
                if (!teacherData.firstName || !teacherData.lastName || !teacherData.teacherId || !teacherData.email) {
                    throw new Error('Заполните обязательные поля (Имя, Фамилия, ID преподавателя, Email)');
                }

                if (currentTeacherId) {
                    // Редактирование существующего преподавателя
                    const index = teachers.findIndex(t => t.id === currentTeacherId);
                    if (index !== -1) {
                        teacherData.id = currentTeacherId;
                        teacherData.createdAt = teachers[index].createdAt; // Сохраняем оригинальную дату создания
                        teachers[index] = teacherData;
                    }
                } else {
                    // Добавление нового преподавателя
                    teacherData.id = Date.now(); // Генерируем уникальный ID
                    teachers.push(teacherData);
                }

                // Сохраняем в localStorage
                saveToLocalStorage();
                
                alert(currentTeacherId ? '🎉 Преподаватель успешно обновлен!' : '🎉 Преподаватель успешно добавлен!');
                closeTeacherModal();
                loadTeachers(); // Перезагружаем список
                
            } catch (error) {
                console.error('❌ Ошибка при сохранении преподавателя:', error);
                alert('❌ Ошибка при сохранении преподавателя: ' + error.message);
            } finally {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            }
        }

        // Функции действий
        function viewTeacher(id) {
            const teacher = teachers.find(t => t.id === id);
            if (teacher) {
                const statusText = getStatusText(teacher.status);
                
                alert(`👨‍🏫 Просмотр преподавателя\n
📋 ID: ${teacher.teacherId}
👤 ФИО: ${teacher.lastName} ${teacher.firstName} ${teacher.middleName || ''}
📧 Email: ${teacher.email}
📞 Телефон: ${teacher.phone || 'Не указан'}
🎓 Факультет: ${teacher.faculty?.name || 'Не указан'}
💼 Должность: ${teacher.position || 'Не указана'}
🎓 Ученая степень: ${teacher.academicDegree || 'Не указана'}
📊 Статус: ${statusText}`);
            }
        }

        function editTeacher(id) {
            const teacher = teachers.find(t => t.id === id);
            if (teacher) {
                showTeacherModal(teacher);
            } else {
                alert('❌ Преподаватель не найден');
            }
        }

        function deleteTeacher(id) {
            if (!confirm('❓ Вы уверены, что хотите удалить этого преподавателя?')) return;
            
            try {
                const index = teachers.findIndex(t => t.id === id);
                if (index !== -1) {
                    teachers.splice(index, 1);
                    saveToLocalStorage();
                    alert('✅ Преподаватель успешно удален!');
                    loadTeachers();
                } else {
                    alert('❌ Преподаватель не найден');
                }
            } catch (error) {
                console.error('❌ Ошибка при удалении преподавателя:', error);
                alert('❌ Ошибка при удалении преподавателя: ' + error.message);
            }
        }

        // Работа с localStorage
        function saveToLocalStorage() {
            try {
                localStorage.setItem('universityTeachers', JSON.stringify(teachers));
                console.log('💾 Данные преподавателей сохранены в localStorage');
            } catch (error) {
                console.error('❌ Ошибка сохранения в localStorage:', error);
            }
        }

        function loadFromLocalStorage() {
            try {
                const saved = localStorage.getItem('universityTeachers');
                if (saved) {
                    const parsed = JSON.parse(saved);
                    if (Array.isArray(parsed) && parsed.length > 0) {
                        teachers = parsed;
                        console.log('📂 Данные преподавателей загружены из localStorage:', teachers.length, 'преподавателей');
                        return true;
                    }
                }
            } catch (error) {
                console.error('❌ Ошибка загрузки из localStorage:', error);
            }
            return false;
        }

        // Вспомогательные функции
        function updateSearchInfo(count) {
            const searchInfo = document.getElementById('searchInfo');
            const search = document.getElementById('searchInput').value;
            const faculty = document.getElementById('facultyFilter').value;
            const position = document.getElementById('positionFilter').value;
            const status = document.getElementById('statusFilter').value;
            const degree = document.getElementById('degreeFilter').value;
            
            let infoText = `Найдено преподавателей: <strong>${count}</strong>`;
            const filters = [];
            
            if (search) filters.push(`поиск: "${search}"`);
            if (faculty) {
                const facultyName = document.getElementById('facultyFilter').selectedOptions[0].text;
                filters.push(`факультет: ${facultyName}`);
            }
            if (position) filters.push(`должность: ${position}`);
            if (status) filters.push(`статус: ${getStatusText(parseInt(status))}`);
            if (degree) filters.push(`ученая степень: ${degree}`);
            
            if (filters.length > 0) {
                infoText += ` | Фильтры: ${filters.join(', ')}`;
            }
            
            searchInfo.innerHTML = infoText;
            searchInfo.style.display = 'block';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            loading.style.display = show ? 'block' : 'none';
        }

        function getStatusText(status) {
            switch(status) {
                case 0: return 'Активный';
                case 1: return 'В отпуске';
                case 2: return 'На больничном';
                case 3: return 'Уволен';
                default: return 'Неизвестно';
            }
        }

        function getStatusClass(status) {
            switch(status) {
                case 0: return 'status-active';
                case 1: return 'status-warning';
                case 2: return 'status-warning';
                case 3: return 'status-inactive';
                default: return '';
            }
        }

        // Дополнительные функции
        function exportToExcel() {
            alert('📊 Функция экспорта в Excel будет реализована в будущем');
        }

        function printTable() {
            window.print();
        }

        // Загрузка факультетов
        function loadFaculties() {
            const selects = [
                document.getElementById('facultyFilter'),
                document.getElementById('faculty')
            ];
            
            selects.forEach(select => {
                // Сохраняем первый option
                const firstOption = select.options[0];
                select.innerHTML = '';
                select.appendChild(firstOption);
                
                faculties.forEach(faculty => {
                    const option = document.createElement('option');
                    option.value = faculty.id;
                    option.textContent = faculty.name;
                    select.appendChild(option);
                });
            });
        }

        // Инициализация при загрузке
        function initializePage() {
            // Пробуем загрузить из localStorage
            if (loadFromLocalStorage()) {
                console.log('✅ Используем данные преподавателей из localStorage');
            } else {
                console.log('✅ Используем демо-данные преподавателей');
                saveToLocalStorage(); // Сохраняем демо-данные в localStorage
            }
            
            loadFaculties();
            setupEventListeners();
            loadAllTeachers();
        }
    </script> }

    <style>
        /* Стили для страницы преподавателей */
        .teachers-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .search-box input {
            flex: 1;
            min-width: 250px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
            font-size: 14px;
        }

        .filter-group select,
        .filter-group input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .teacher-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .action-btn {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .action-btn:hover {
            background-color: #e9ecef;
            transform: translateY(-1px);
        }

        .btn {
            background-color: #2a4b8c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .btn:hover {
            background-color: #1a2a6c;
        }

        .btn-secondary {
            background-color: #6c757d;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        /* Таблица */
        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .teachers-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .teachers-table th {
            background: linear-gradient(135deg, #2a4b8c, #1a2a6c);
            color: white;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            position: sticky;
            top: 0;
        }

        .teachers-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e9ecef;
            font-size: 14px;
        }

        .teachers-table tr:hover {
            background-color: #f8f9fa;
        }

        .teachers-table tr:nth-child(even) {
            background-color: #fafafa;
        }

        .teachers-table tr:nth-child(even):hover {
            background-color: #f1f3f4;
        }

        .teacher-name .name-main {
            font-weight: 500;
        }

        .teacher-name .name-middle {
            font-size: 0.9em;
            color: #666;
        }

        .action-buttons {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
        }

        .view-btn { background-color: #e3f2fd; }
        .edit-btn { background-color: #fff3e0; }
        .delete-btn { background-color: #ffebee; }

        /* Статусы */
        .teacher-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-align: center;
            min-width: 120px;
        }

        .status-active {
            background-color: #e8f5e8;
            color: #2e7d32;
            border: 1px solid #2e7d32;
        }

        .status-warning {
            background-color: #fff3e0;
            color: #f57c00;
            border: 1px solid #f57c00;
        }

        .status-inactive {
            background-color: #ffebee;
            color: #c62828;
            border: 1px solid #c62828;
        }

        /* Модальное окно */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .modal-header h3 {
            margin: 0;
            color: #2a4b8c;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            padding: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
        }

        .form-group input,
        .form-group select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 20px;
            border-top: 1px solid #e9ecef;
        }

        /* Состояния */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-icon {
            font-size: 64px;
            margin-bottom: 20px;
        }

        .loading-spinner {
            text-align: center;
            padding: 40px;
            color: #2a4b8c;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #2a4b8c;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        .keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .demo-warning {
            background: #e3f2fd;
            border: 1px solid #2196f3;
            color: #1976d2;
            padding: 12px 16px;
            margin-bottom: 20px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
        }

        .demo-warning strong {
            font-weight: 600;
        }

        .search-info {
            background: #e7f3ff;
            border: 1px solid #b3d9ff;
            color: #0066cc;
            padding: 12px 20px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        /* Адаптивность */
        .media (max-width: 768px) {
            .teachers-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .search-box {
                flex-direction: column;
            }
            
            .filters {
                grid-template-columns: 1fr;
            }
            
            .teacher-actions {
                flex-direction: column;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .teachers-table {
                font-size: 12px;
            }
            
            .teachers-table th,
            .teachers-table td {
                padding: 8px 10px;
            }
        }
    </style>
</div>